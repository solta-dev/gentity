{{ if .PrimaryKey }} {{ $primaryKey := index .UniqIndexes .PrimaryKey }}{{ $autoIncrementField := .AutoIncrementField }}
func (e *{{ .GoName }}) Delete(ctx context.Context) (err error) {
	dbExecutor := fromContext(ctx)

	sql := `DELETE FROM "{{ .SQLName }}" WHERE {{ range $i, $f := $primaryKey }}{{ if $i }} AND {{ end }}{{ $f.SQLName }} = ${{ add $f.Num 1 }}{{ end }}`
	_, err = dbExecutor.Exec(ctx, sql, {{ range $f := $primaryKey }}e.{{ $f.GoName }}, {{ end }});
    if err != nil {
        err = fmt.Errorf("Delete query '%s' failed: %+v", sql, err)
    }

	return
}

func (es {{ .GoName }}s) Delete(ctx context.Context) (err error) {
	dbExecutor := fromContext(ctx)

	sql := `DELETE FROM "{{ .SQLName }}" WHERE `
    rowsSql := make([]string, len(es))
    var args []any

    for i, e := range es {
        rowsSql[i] = fmt.Sprintf(`({{ range $i, $f := $primaryKey }}{{ if $i }} AND {{ end }}{{ $f.SQLName }} = $%d{{ end }})`,
            {{- range $i, $f := $primaryKey }}{{ if $i }}, {{ end }}i * {{ len $primaryKey }} + {{ add 1 $i }}{{ end }})
        args = append(args, {{ range $i, $f := $primaryKey }}{{ if $i }}, {{ end }}e.{{ $f.GoName }}{{ end }})
    }

    sql = sql + strings.Join(rowsSql, " OR ")
	_, err = dbExecutor.Exec(ctx, sql, args...);
    if err != nil {
        err = fmt.Errorf("Delete query '%s' failed: %+v", sql, err)
    }

	return
}
{{ end }}
